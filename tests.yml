# The test definitions in this file are used to ensure that a change to the project doesn't break any of the core elements of the language.
# The testing itself is done by the test.py script in the tests folder, which uses these definitions.

# Test definition syntax
# test name:
#   path: file_path # The path to the test file (excluding the ".ash" extension) from the tests directory
#   pass: [yes|no] # If the compilation of the test file is supposed to pass or not
#   run: [yes|no] # # If the execution of the resulting class file should be tested
#   args: {args} # Not yet used

operator overloads:
  path: OperatorOverloads
  pass: yes
  run: yes
  
properties:
  path: Properties
  pass: yes
  run: yes
  
data clases:
  path: DataClasses
  pass: yes
  run: yes

incorrect package:
  path: IncorrectPackage
  pass: no
  run: no

correct package:
  path: testpkg/CorrectPackage
  pass: yes
  run: no
  
mutators:
  path: Mutators
  pass: yes
  run: yes

constructors:
  path: Constructors
  pass: yes
  run: yes

if statements:
  path: IfStatements
  pass: yes
  run: yes
  
arrays:
  path: Arrays
  pass: yes
  run: yes

multiple imports:
  path: MultipleImports
  pass: yes
  run: no
  
default parameter value:
  path: DefaultParameterValue
  pass: yes
  run: yes
 
#list and map:
#  path: ListAndMap
#  pass: yes
#  run: yes
  
definition files:
  path: DefinitionFiles
  pass: yes
  run: yes

break statement:
  path: Break
  pass: yes
  run: yes
  
boxing:
  path: Boxing
  pass: yes
  run: yes

closures:
  path: Closures
  pass: yes
  run: yes

lambda expressions:
  path: LambdaExpressions
  pass: yes
  run: yes
  
#match statement:
#  path: MatchStatement
#  pass: yes
#  run: yes
